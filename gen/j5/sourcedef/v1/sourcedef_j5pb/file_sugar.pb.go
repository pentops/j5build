// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package sourcedef_j5pb

type IsRootElement_Type = isRootElement_Type
type IsNestedSchema_Type = isNestedSchema_Type

// TopicType is a oneof wrapper
type TopicTypeKey string

const (
	Topic_Publish TopicTypeKey = "publish"
	Topic_Reqres  TopicTypeKey = "reqres"
	Topic_Upsert  TopicTypeKey = "upsert"
)

func (x *TopicType) TypeKey() (TopicTypeKey, bool) {
	switch x.Type.(type) {
	case *TopicType_Publish_:
		return Topic_Publish, true
	case *TopicType_Reqres:
		return Topic_Reqres, true
	case *TopicType_Upsert_:
		return Topic_Upsert, true
	default:
		return "", false
	}
}

type IsTopicTypeWrappedType interface {
	TypeKey() TopicTypeKey
}

func (x *TopicType) Set(val IsTopicTypeWrappedType) {
	switch v := val.(type) {
	case *TopicType_Publish:
		x.Type = &TopicType_Publish_{Publish: v}
	case *TopicType_ReqRes:
		x.Type = &TopicType_Reqres{Reqres: v}
	case *TopicType_Upsert:
		x.Type = &TopicType_Upsert_{Upsert: v}
	}
}
func (x *TopicType) Get() IsTopicTypeWrappedType {
	switch v := x.Type.(type) {
	case *TopicType_Publish_:
		return v.Publish
	case *TopicType_Reqres:
		return v.Reqres
	case *TopicType_Upsert_:
		return v.Upsert
	default:
		return nil
	}
}
func (x *TopicType_Publish) TypeKey() TopicTypeKey {
	return Topic_Publish
}
func (x *TopicType_ReqRes) TypeKey() TopicTypeKey {
	return Topic_Reqres
}
func (x *TopicType_Upsert) TypeKey() TopicTypeKey {
	return Topic_Upsert
}

type IsTopicType_Type = isTopicType_Type
