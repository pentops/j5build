// Code generated by protoc-gen-go-sugar. DO NOT EDIT.

package j5st_pb

import (
	driver "database/sql/driver"
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
)

// FooEventType is a oneof wrapper
type FooEventTypeKey string

const (
	FooEvent_Create  FooEventTypeKey = "create"
	FooEvent_Archive FooEventTypeKey = "archive"
)

func (x *FooEventType) TypeKey() (FooEventTypeKey, bool) {
	switch x.Type.(type) {
	case *FooEventType_Create_:
		return FooEvent_Create, true
	case *FooEventType_Archive_:
		return FooEvent_Archive, true
	default:
		return "", false
	}
}

type IsFooEventTypeWrappedType interface {
	TypeKey() FooEventTypeKey
	proto.Message
}

func (x *FooEventType) Set(val IsFooEventTypeWrappedType) {
	switch v := val.(type) {
	case *FooEventType_Create:
		x.Type = &FooEventType_Create_{Create: v}
	case *FooEventType_Archive:
		x.Type = &FooEventType_Archive_{Archive: v}
	}
}
func (x *FooEventType) Get() IsFooEventTypeWrappedType {
	switch v := x.Type.(type) {
	case *FooEventType_Create_:
		return v.Create
	case *FooEventType_Archive_:
		return v.Archive
	default:
		return nil
	}
}
func (x *FooEventType_Create) TypeKey() FooEventTypeKey {
	return FooEvent_Create
}
func (x *FooEventType_Archive) TypeKey() FooEventTypeKey {
	return FooEvent_Archive
}

type IsFooEventType_Type = isFooEventType_Type

// FooStatus
const (
	FooStatus_UNSPECIFIED FooStatus = 0
	FooStatus_ACTIVE      FooStatus = 1
	FooStatus_INACTIVE    FooStatus = 2
)

var (
	FooStatus_name_short = map[int32]string{
		0: "UNSPECIFIED",
		1: "ACTIVE",
		2: "INACTIVE",
	}
	FooStatus_value_short = map[string]int32{
		"UNSPECIFIED": 0,
		"ACTIVE":      1,
		"INACTIVE":    2,
	}
	FooStatus_value_either = map[string]int32{
		"UNSPECIFIED":            0,
		"FOO_STATUS_UNSPECIFIED": 0,
		"ACTIVE":                 1,
		"FOO_STATUS_ACTIVE":      1,
		"INACTIVE":               2,
		"FOO_STATUS_INACTIVE":    2,
	}
)

// ShortString returns the un-prefixed string representation of the enum value
func (x FooStatus) ShortString() string {
	return FooStatus_name_short[int32(x)]
}
func (x FooStatus) Value() (driver.Value, error) {
	return []uint8(x.ShortString()), nil
}
func (x *FooStatus) Scan(value interface{}) error {
	var strVal string
	switch vt := value.(type) {
	case []uint8:
		strVal = string(vt)
	case string:
		strVal = vt
	default:
		return fmt.Errorf("invalid type %T", value)
	}
	val := FooStatus_value_either[strVal]
	*x = FooStatus(val)
	return nil
}
